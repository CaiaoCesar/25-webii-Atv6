// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo User (Professor ou Admin)
model User {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  foto      String? // ? = opcional
  papel     String   @default("PROFESSOR") // 'PROFESSOR' ou 'ADMIN'
  createdAt DateTime @default(now()) @map("data_criacao")
  updatedAt DateTime @updatedAt @map("data_atualizacao")

  questions Question[] // Quest√µes criadas pelo professor

  @@map("users") // nome da tabela no banco
}

model Question {
  id              Int      @id @default(autoincrement())
  enunciado       String
  dificuldade     Int
  respostaCorreta String?  @map("resposta_correta")
  disciplinaId    Int      @map("disciplina_id")
  autorId         Int      @map("autor_id")
  ativa           Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("data_criacao")
  updatedAt       DateTime @updatedAt @map("data_atualizacao")

  // Relacionamentos
  disciplina Subject @relation(fields: [disciplinaId], references: [id])
  autor      User    @relation(fields: [autorId], references: [id])

  @@map("questions")
}

model Subject {
  id          Int      @id @default(autoincrement())
  nome        String
  ativa       Boolean  @default(true)
  professorId Int      @map("professor_id")
  createdAt   DateTime @default(now()) @map("data_criacao")
  updatedAt   DateTime @updatedAt @map("data_atualizacao")

  // Relacionamento com Questions (adicionar depois)
  questions Question[]

  @@map("subjects")
}
